#INCLUDE "course.module"
#INCLUDE "hostio.inc"
#INCLUDE "ioconv.module"

#USE "hostio.lib"
#USE "course.lib"

VAL INT len IS 10:

--PROC sinusoidCarrier()
--:

--PROC txGain()
--:

--PROC matchedFilter()
--:

--PROC dbpskReceiver()
--:

--PROC differentialEncoder()
--:

--PROC dbpskModulator()
--:

--PROC dbpskDemodulator()
--:

--PROC configOutput()
--:
-- Define the DBPSK Transmitter Block
PROC channelFilter(CHAN BYTE inC?)
  BYTE values :
  SEQ
    --out.string ("Enter channel filter ", 0, out!)
    SEQ i = 0 FOR 1
      inC ? values
    --out.string ("Hello, world! ", 0, out!)
    --out.DSTRING    (values, 0, out!)
    --out.string ("*n", 0, out!)
:
-- Define the DBPSK Transmitter Block
--PROC dbpskTransmitter(CHAN BYTE out!, CHAN BYTE outC!, CHAN BYTE inC?)
PROC dbpskTransmitter(CHAN INT outVal!, CHAN INT inC?)
  INT values :
  INT txParam:
  SEQ
    -- We're not physically pushing data through the flowgraph
    --inC ? values

    txParam := 23
    outVal ! txParam
    txParam := 50
    outVal ! txParam
:
PROC outputToScreen(CHAN BYTE out!, CHAN INT txParamC?)
  INT txParam :
  SEQ
    txParamC ? txParam
    out.int(txParam, 0 ,out)
    out.string("*nDone*n", 0, out!)

    txParamC ? txParam
    out.int(txParam, 0 ,out)
    out.string("*nDone*n", 0, out!)
:
PROC setupGraphs(CHAN BYTE out!)
  CHAN INT txToChanfiltC :
  CHAN INT txValC:
  CHAN INT msgC:
  CHAN INT txParamC:
  SEQ
    PAR
      dbpskTransmitter(txParamC!, msgC?)
      outputToScreen(out!, txParamC?)
      --channelFilter(txToChanfiltC?)
:
